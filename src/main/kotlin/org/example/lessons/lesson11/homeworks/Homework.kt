package org.example.lessons.lesson11.homeworks

//Задачи на сигнатуру метода
//Напишите сигнатуру метода в которую входит модификатор доступа, название функции, список аргументов с типами и возвращаемое значение.
// В теле метода можешь сделать возврат объекта нужного типа если это требуется для устранения ошибок.

//Не принимает аргументов и не возвращает значения.
fun f1() {

}
//Принимает два целых числа и возвращает их сумму.
fun f2(a:Int, b:Int): Int = a + b
//Принимает строку и ничего не возвращает.
fun f3(c: String) {

}
//Принимает список целых чисел и возвращает среднее значение типа Double.
fun f4(list: List<Int>): Double {
    return list.average()
}
//Принимает nullable строку и возвращает её длину в виде nullable целого числа и доступна только в текущем файле.
private fun f5(string: String? = null): Int? {
    return string?.length
}
//Не принимает аргументов и возвращает nullable вещественное число.
fun f6(): Double? {
    return null
}
//Принимает nullable список целых чисел, не возвращает значения и доступна только в текущем файле.
private fun f7(list2: List<Int>?) {

}
//Принимает целое число и возвращает nullable строку.
fun f8(d: Int): String? {
    return null
}
//Не принимает аргументов и возвращает список nullable строк.
fun f9(): String? {
    return null
}
//Принимает nullable строку и nullable целое число и возвращает nullable булево значение.
fun f10(string2: String?, ii: Int?): Boolean? {
    return null
}



//Задачи на написание кода
//Напишите валидную сигнатуру метода а так же рабочий код для задач.

//Напишите функцию multiplyByTwo, которая принимает целое число и возвращает его, умноженное на 2.
fun multiplyByTwo(s: Int): Int {
    return s * 2
}
//Создайте функцию isEven, которая принимает целое число и возвращает true, если число чётное, и false в противном случае.
fun isEven(v: Int): Boolean {
    if (v % 2 ==0) {
        return true
    } else return false
}
//Напишите функцию printNumbersUntil, которая принимает целое число n и выводит на экран числа от 1 до n.
fun printNumbersUntil(n: Int) {
    for (i in 1..n) {
        println(i)
    }
}
// Если число n меньше 1, функция должна прекратить выполнение с помощью return без вывода сообщений.
fun f11(nn: Int) {
    if (nn < 1) {
        return
    }
}
//Создайте функцию findFirstNegative, которая принимает список целых чисел и возвращает первое отрицательное число в списке.
// Если отрицательных чисел нет, функция должна вернуть null.
fun findFirstNegative(list3: List<Int>): Int? {
    for (i in list3) {
        if (i < 0) {
            return i
        }
    }
    return null
}
//Напишите функцию processList, которая принимает список строк. Функция должна проходить по списку и выводить каждую строку.
// Если встречается null значение, функция должна прекратить выполнение с помощью return без возврата значения.
fun processList(list4: List<String?>) {
    for (i in list4) {
        if (i == null) {
            return
        }
        println(i)
    }
}