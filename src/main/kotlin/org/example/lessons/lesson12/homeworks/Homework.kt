package org.example.lessons.lesson12.homeworks


//Задачи на приведение коллекции к значению
val coll = listOf(-1, -20, 0, 23, 43, 11)
//Проверить, что размер коллекции больше 5 элементов.
val moreThanFive = coll.size > 5
//Проверить, что коллекция пустая
val collIsEmpty = coll.isEmpty()
//Проверить, что коллекция не пустая
val collIsNotEmpty = coll.isNotEmpty()
//Взять элемент по индексу или создать значение если индекса не существует
val getOrElse = coll.getOrElse (10) {98}
//Собрать коллекцию в строку
val inString = coll.joinToString { ", " }
//Посчитать сумму всех значений
val sum = coll.sum()
//Посчитать среднее
val ave = coll.average()
//Взять максимальное число
val maxEl = coll.max()
//Взять минимальное число
val minEl = coll.min()
//Взять первое число или null
val firstOrNull = coll.firstOrNull()
//Проверить что коллекция содержит элемент
val containEl = coll.contains(111)



//Задачи на обработку коллекций

//Отфильтровать коллекцию по диапазону 18-30
val filterColl = coll.filter { it in 18..30 }
//Выбрать числа, которые не делятся на 2 и 3 одновременно
val filterNot = coll.filterNot { it % 2 == 0 && it % 3 == 0 }
//Очистить текстовую коллекцию от null элементов
val clean = coll.filterNotNull()
//Преобразовать текстовую коллекцию в коллекцию длин слов
val coll2 = listOf("sss", "ffff", "test", "test2")
val mapColl = coll2.map { it.length }
//Преобразовать текстовую коллекцию в мапу, где ключи - перевёрнутые слова, а значения - длина слов
val reverse = coll2.associate { it.reversed() to it.length}
//Отсортировать список в алфавитном порядке
val sortColl = coll.sorted()
//Взять первые 3 элемента списка
//Распечатать квадраты элементов списка
val forEach = coll.forEach { println(it * it) }
//Группировать список по первой букве слов
val firstSymbolGroup = coll2.groupBy { it.first() }
//Очистить список от дублей
val removeDuplicates = coll.distinct()
//Отсортировать список по убыванию
val sortDesc = coll.sortedDescending()
//Взять последние 3 элемента списка
val lastSymbols = coll.takeLast(3)


//Задача 24. Характеристика числовой коллекции
//Напиши функцию, которая принимает коллекцию чисел и возвращает строку с характеристикой коллекции используя конструкцию when

//Если коллекция пустая - “Пусто”
//Если количество элементов меньше пяти - “Короткая”
//Если коллекция начинается с 0 - “Стартовая”
//Если сумма всех чисел больше 10000 - “Массивная”
//Если среднее значение равно 10 - “Сбалансированная”
//Если длина строки образованная склеиванием коллекции в строку равна 20 - “Клейкая”
//Если максимальное число меньше -10 - “Отрицательная”
//Если минимальное число больше 1000 - “Положительная”
//Если содержит одновременно числа 3 и 14 - “Пи***тая”
//Иначе - “Уникальная”
//Вызвать метод с данными, подходящими под каждую из веток
val task1 = listOf(1, 2, 4, 0, -8, 43)
fun function1 (task1: List<Int>): String {
    return when {
        task1.isEmpty() -> "Пусто"
        task1.size < 5 -> "Короткая"
        task1.firstOrNull( ) == 0 -> "Стартовая"
        task1.sum() > 10000 -> "Массивная"
        task1.average() == 10.0 -> "Сбалансированная"
        task1.joinToString { " " }.length == 20 -> "Клейкая"
        task1.max() < -10 -> "Отрицательная"
        task1.min() > 1000 -> "Положительная"
        task1.contains(3) && task1.contains(14) -> "Пи***тая"
        else -> {"Уникальная"}
    }
}


//Задача 25. Анализ учебных оценок
//Напиши функцию, которая принимает список чисел и возвращает список чисел.
//Пример данных: val grades = listOf(85, 58, 90, 74, 88, 67, 95, 92, 50, 42, 12)
//Цель: Отфильтровать удовлетворительные оценки (>=60), отсортировать оставшиеся по возрастанию и взять первые 3.
// Вызывай методы обработки и фильтрации последовательно один из другого, чтобы результат предыдущего метода являлся основой для следующего.
val grades = listOf(85, 58, 90, 74, 88, 67, 95, 92, 50, 42, 12)
fun function2 (grades: List<Int>): List<Int> {
    return grades
        .filter { it >= 60 }
        .sorted()
        .take(3)
}


//Задача 26. Создание каталога по первой букве
//Напиши функцию, которая принимает список строк и возвращает словарь с ключом - буквой и значением - строкой.
//Начальные значения: val list = listOf(
//    "Стол", "табурет", "ваза", "Кружка", "Зеркало", "ковер", "Шкаф", "часы", "Люстра", "подушка", "Картина",
//    "столик", "Вазон", "шторы", "Пуф", "книга", "Фоторамка", "светильник", "Коврик", "вешалка", "Подставка", "телевизор",
//    "Комод", "полка", "Абажур", "диван", "Кресло", "занавеска", "Бра", "пепельница", "Глобус", "статуэтка", "Поднос", "фигурка",
//    "Ключница", "плед", "Тумба", "игрушка", "Настенные часы", "подсвечник", "Журнальный столик", "сувенир", "Корзина для белья", "посуда",
//    "Настольная лампа", "торшер", "Этажерка"
//)
//Цель: Привести все слова в списке к нижнему регистру, сгруппировать в каталог по первой букве используя метод groupBy
val list = listOf(
    "Стол", "табурет", "ваза", "Кружка", "Зеркало", "ковер", "Шкаф", "часы", "Люстра", "подушка", "Картина",
    "столик", "Вазон", "шторы", "Пуф", "книга", "Фоторамка", "светильник", "Коврик", "вешалка", "Подставка", "телевизор",
    "Комод", "полка", "Абажур", "диван", "Кресло", "занавеска", "Бра", "пепельница", "Глобус", "статуэтка", "Поднос", "фигурка",
    "Ключница", "плед", "Тумба", "игрушка", "Настенные часы", "подсвечник", "Журнальный столик", "сувенир", "Корзина для белья", "посуда",
    "Настольная лампа", "торшер", "Этажерка"
)
fun function2 (list: List<String>): Map<Char, List<String>> {
    return list
        .map { it.lowercase() }
        .groupBy { it.first() }
}

//Задание 27. Подсчёт средней длины слов в списке
//Напиши функцию, которая принимает список строк и возвращает строку.
//Начальные значения взять из предыдущей задачи.
//Цель: Перевести все слова в количество букв, подсчитать среднее значение.
// Вернуть форматированный текст с двумя знаками после запятой, используя функцию format и подходящий шаблон.
val list2 = listOf(
    "Стол", "табурет", "ваза", "Кружка", "Зеркало", "ковер", "Шкаф", "часы", "Люстра", "подушка", "Картина",
    "столик", "Вазон", "шторы", "Пуф", "книга", "Фоторамка", "светильник", "Коврик", "вешалка", "Подставка", "телевизор",
    "Комод", "полка", "Абажур", "диван", "Кресло", "занавеска", "Бра", "пепельница", "Глобус", "статуэтка", "Поднос", "фигурка",
    "Ключница", "плед", "Тумба", "игрушка", "Настенные часы", "подсвечник", "Журнальный столик", "сувенир", "Корзина для белья", "посуда",
    "Настольная лампа", "торшер", "Этажерка"
)
fun function3 (list2: List<String>): String {
    return String.format("length", list2.map { it.length }.average())
}


//Задание 28: Категоризация чисел
//Напиши функцию, которая принимает список чисел и возвращает словарь с ключами - строками и значениями - числами.
//Начальные значения: val numbers = listOf(1, 3, 5, 7, 3, 1, 8, 9, 9, 7)
//Цель: Отобрать уникальные числа, отсортировать по убыванию и сгруппировать по четности (“четные” и “нечетные”).
val numbers = listOf(1, 3, 5, 7, 3, 1, 8, 9, 9, 7)
fun function4 (numbers: List<Int>): Map<String, List<Int>> {
    return numbers
        .distinct()
        .sortedDescending()
        .groupBy { if (it % 2 == 0) "четные" else "нечетные" }
}


//Задание 29: Поиск первого подходящего элемента
//Напиши функцию, которая принимает список чисел и число и возвращает nullable число.
//Начальные значения: val ages = listOf(22, 18, 30, 45, 17, null, 60) и число для проверки возраста, например 18.
//Цель: Найти первый возраст в списке, который соответствует условию (больше второго аргумента) и вернуть его, либо null если значения не нашлось.
val ages = listOf(22, 18, 30, 45, 17, null, 60)
fun function5 (ages: List<Int?>): Int? {
    return ages.firstOrNull {it != null && it > 18}
}